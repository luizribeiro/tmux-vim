#!/usr/bin/env python

from datetime import datetime;
from ConfigParser import SafeConfigParser;
import os;
import os.path;
import sys;

def main():
	load_config_file_to_environment()
	cp = create_config_from_environment()
	write_config(cp, sys.stdout)

def load_config_file_to_environment():
	# Rather than try to parse the shell config file, exec the shell itself,
	# get it to parse the shell config file, and then call this script again.
	# That way all the stuff in the config file will then be in the environment.
	#
	# Use $TMUX_VIM_CONVERTING to flag that we've called ourselves.
	if 'TMUX_VIM_CONFIG' in os.environ and '_TMUX_VIM_CONVERTING' not in os.environ:
		shell = os.environ['SHELL']
		shell_cmds = [
			'set -a',									# export all variables
			'source ' + os.environ['TMUX_VIM_CONFIG'],	# read the config
			'_TMUX_VIM_CONVERTING=1',					# set the re-entry flag
			os.path.abspath(sys.argv[0])				# run this script again
		]
		# Call exec rather than system because we don't want to return
		os.execl(shell, shell, '-c', ';'.join(shell_cmds))

def create_config_from_environment():
	cp = SafeConfigParser()

	env = os.environ
	cp.add_section('general')
	if 'TMUX_VIM_TMUX_BIN' in env:
		cp.set('general', 'tmux', env['TMUX_VIM_TMUX_BIN'])
	else:
		cp.set('general', '# tmux', '(tmux commandline)')
	if 'TMUX_VIM_VIM_BIN' in env or 'TMUX_VIM_VIM_ARGS' in env:
		vim = env.get('TMUX_VIM_VIM_BIN', 'vim')
		if 'TMUX_VIM_VIM_ARGS' in env:
			vim += ' ' + env['TMUX_VIM_VIM_ARGS']
		cp.set('general', 'vim', vim)
	else:
		cp.set('general', '# vim', '(vim commandline)')

	if 'TMUX_VIM_LAYOUT' in env:
		cp.add_section('layout')
		for opt in env['TMUX_VIM_LAYOUT'].split(','):
			key, value = opt.split(':')
			cp.set('layout', key, value)

	return cp

def write_config(cp, fh):
	print >> fh,  '# tmux-vim config'
	print >> fh,  '# automatically generated by %s at %s' % (os.path.basename(sys.argv[0]), datetime.now())
	print >> fh
	cp.write(sys.stdout)


if __name__ == "__main__":
	main()
